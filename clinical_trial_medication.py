# -*- coding: utf-8 -*-
"""Clinical_trial_medication.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rt2Bn5Ym2h7v-ex854Cpf2ZBBVgdQQHs
"""

# prompt: import scipy and statsmodel

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy
import statsmodels.api as sm

# Commented out IPython magic to ensure Python compatibility.
# prompt: set up matplotlib to display plots inline

# %matplotlib inline

# prompt: load dataset and display using head

data = pd.read_csv('/content/diabetes_medication_clinical_trial1_3.csv') # Replace 'your_dataset.csv' with the actual file name
data.head()



from google.colab import sheets
sheet = sheets.InteractiveSheet(df=data)

# prompt: check shape of dataframe

data.shape

# prompt: display using info() and descibe

data.info()
data.describe()

# prompt: check for missing values

data.isnull().sum()

# prompt: handle any missing or inconsistent data

# ... (your existing code)

# Handle missing values (example: imputation with mean for numerical columns)
numerical_cols = data.select_dtypes(include=np.number).columns
for col in numerical_cols:
    if data[col].isnull().any():
        data[col].fillna(data[col].mean(), inplace=True)

# Handle inconsistent data (example: replace inconsistent values with a specific value)
# Assuming 'gender' column has inconsistent values like 'Male', 'M', 'Female', 'F'
if 'gender' in data.columns:
  data['gender'] = data['gender'].replace({'M': 'Male', 'F': 'Female'})
  # Or remove rows with inconsistent gender values if they cannot be mapped:
  # data = data[data['gender'].isin(['Male', 'Female'])]


# Alternatively, for categorical columns, fill missing values with the mode
categorical_cols = data.select_dtypes(exclude=np.number).columns
for col in categorical_cols:
  if data[col].isnull().any():
    data[col].fillna(data[col].mode()[0], inplace=True)

# Check for and handle duplicate rows
data.drop_duplicates(inplace=True)


# Verify changes
print(data.isnull().sum())
print(data.info())
data.describe()

# Assuming 'group' and 'hba1c' are columns in your DataFrame 'data'
average_hba1c_by_group = data.groupby('group')['hba1c'].mean()
average_hba1c_by_group

# prompt: analyze the change in Hba1c over time for both groups

# Assuming 'group', 'hba1c', and 'time' (or a similar column representing time) are in your DataFrame
# Create a time column if it doesn't exist (example: using 'visit' as the time point)
if 'time' not in data.columns:
    data['time'] = data['visit']  # Replace 'visit' if your time column has a different name

# Group data by group and time and calculate the mean HbA1c
hba1c_over_time = data.groupby(['group', 'time'])['hba1c'].mean().reset_index()

# Plot the change in HbA1c over time for each group
plt.figure(figsize=(10, 6))
sns.lineplot(x='time', y='hba1c', hue='group', data=hba1c_over_time, marker='o')
plt.title('Change in HbA1c over Time by Group')
plt.xlabel('Time')
plt.ylabel('Average HbA1c')
plt.show()

# prompt: examine the frequncy and types of adverse events

# Assuming 'adverse_event' is the column containing adverse event information
adverse_event_counts = data['adverse_event'].value_counts()
print(adverse_event_counts)

# Plot the frequency of adverse events
plt.figure(figsize=(10, 6))
sns.countplot(x='adverse_event', data=data)
plt.title('Frequency of Adverse Events')
plt.xlabel('Adverse Event')
plt.ylabel('Count')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.show()

# Assuming your DataFrame is named 'data' as in your provided code.
plt.figure(figsize=(8, 6))
sns.boxplot(data=data, x='group', y='hba1c', palette='Set2')
plt.title('Final HbA1c Levels by Group')
plt.xlabel('Group')
plt.ylabel('Final HbA1c Level')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Assuming 'initial_hba1c' and 'hba1c' columns exist in your DataFrame 'data'
data['hba1c_change'] = data['initial_hba1c'] - data['hba1c']

plt.figure(figsize=(8, 6))
sns.scatterplot(data=data, x='initial_hba1c', y='hba1c_change', hue='group', palette='Set1')
plt.title('Initial HbA1c vs Change in HbA1c')
plt.xlabel('Initial HbA1c')
plt.ylabel('Change in HbA1c (Initial - Final)')
plt.axhline(0, color='gray', linestyle='--', linewidth=1)  # Reference line at 0
plt.grid(True, linestyle='--', alpha=0.5)
plt.show()

# prompt: perform a t-test to compare the final Hba1c levels between treatment and placebo groups

from scipy.stats import ttest_ind

# Assuming 'group' and 'hba1c' are columns in your DataFrame 'data'
treatment_group = data[data['group'] == 'treatment']['hba1c']
placebo_group = data[data['group'] == 'placebo']['hba1c']

t_statistic, p_value = ttest_ind(treatment_group, placebo_group)

print(f"T-statistic: {t_statistic}")
print(f"P-value: {p_value}")

# Interpret the results
alpha = 0.05  # Significance level
if p_value < alpha:
    print("There is a statistically significant difference in final HbA1c levels between the treatment and placebo groups.")
else:
    print("There is no statistically significant difference in final HbA1c levels between the treatment and placebo groups.")

# prompt: conduct a repeated ANOVA to analyze the HbA1c changes over time

import statsmodels.formula.api as sm

# Reshape the data for repeated measures ANOVA
# This assumes your data is in a 'long' format
# with each row representing a single measurement for a patient at a timepoint.

# Fit the repeated measures ANOVA model
model = sm.mixedlm("hba1c ~ group * time", data, groups=data["subject_id"]) #Replace patient_id with your patient id column
result = model.fit()

# Print the ANOVA table
print(result.summary())

# Post-hoc tests (if needed)
# You can perform post-hoc tests (e.g., Tukey's HSD) to determine
# which specific groups differ significantly.
# This will depend on your findings in the ANOVA table.

# Example using statsmodels.stats.multicomp
import statsmodels.stats.multicomp as mc
comp = mc.MultiComparison(data['hba1c'], data['group'])
post_hoc_res = comp.tukeyhsd()
print(post_hoc_res.summary())

# prompt: use the chi-square test to compare adverse event rates between groups

from scipy.stats import chi2_contingency

# Create a contingency table
contingency_table = pd.crosstab(data['group'], data['adverse_event'])

# Perform the chi-square test
chi2, p, dof, expected = chi2_contingency(contingency_table)

print(f"Chi-square statistic: {chi2}")
print(f"P-value: {p}")
print(f"Degrees of freedom: {dof}")
print("Expected frequencies:")
print(expected)

# Interpret the results
alpha = 0.05
if p < alpha:
    print("There is a statistically significant association between group and adverse events.")
else:
    print("There is no statistically significant association between group and adverse events.")

# prompt: analyze the medication effectiveness based on age groups and gender

# Analyze medication effectiveness based on age groups and gender

# Assuming 'age', 'gender', and 'hba1c_change' (or a similar measure of effectiveness) are in your DataFrame
# Categorize age into groups (e.g., young, middle-aged, older)
data['age_group'] = pd.cut(data['age'], bins=[0, 30, 60, 100], labels=['Young', 'Middle-aged', 'Older'])

# Group data by age group and gender and calculate the average change in HbA1c
effectiveness_by_age_gender = data.groupby(['age_group', 'gender'])['hba1c_change'].mean().reset_index()

# Plotting the effectiveness
plt.figure(figsize=(10, 6))
sns.barplot(x='age_group', y='hba1c_change', hue='gender', data=effectiveness_by_age_gender)
plt.title('Medication Effectiveness by Age Group and Gender')
plt.xlabel('Age Group')
plt.ylabel('Average Change in HbA1c')
plt.show()


# Perform statistical tests (e.g., ANOVA or t-tests) to compare effectiveness across groups.
# Example: Two-way ANOVA
import statsmodels.formula.api as sm

model = sm.ols('hba1c_change ~ C(age_group) * C(gender)', data=data).fit()
print(model.summary())

# Post-hoc tests
# Perform post-hoc tests to determine specific group differences.
# Example using Tukey's HSD
comp = mc.MultiComparison(data['hba1c_change'], data['age_group'])
post_hoc_res = comp.tukeyhsd()
print(post_hoc_res.summary())

comp = mc.MultiComparison(data['hba1c_change'], data['gender'])
post_hoc_res = comp.tukeyhsd()
print(post_hoc_res.summary())

# Create age groups
bins = [0, 30, 45, 60, 120]
labels = ['18–30', '31–45', '46–60', '61+']
data['age_group'] = pd.cut(data['age'], bins=bins, labels=labels)

# Calculate change in HbA1c
data['hba1c_change'] = data['initial_hba1c'] - data['hba1c']

summary = data.groupby(['group', 'gender', 'age_group'])['hba1c_change'].agg(['mean', 'std', 'count']).reset_index()
print(summary)

plt.figure(figsize=(12, 6))
sns.barplot(data=data, x='age_group', y='hba1c_change', hue='group', ci='sd')

plt.title('HbA1c Change by Age Group and Treatment')
plt.xlabel('Age Group')
plt.ylabel('Mean HbA1c Change')
plt.grid(True, linestyle='--', alpha=0.5)
plt.legend(title='Group')
plt.show()

from scipy.stats import pearsonr

# Assuming 'duration_diabetes' and 'hba1c_change' are already calculated as in the previous code.

# Calculate the Pearson correlation between duration of diabetes and HbA1c change
corr_coefficient, p_value = pearsonr(data['duration_diabetes'], data['hba1c_change'])

# Print the correlation results
print(f"Pearson Correlation Coefficient: {corr_coefficient:.4f}")
print(f"P-value: {p_value:.4f}")

# Visualize the correlation with a scatter plot
plt.figure(figsize=(8, 6))
sns.scatterplot(data=data, x='duration_diabetes', y='hba1c_change', color='blue')
plt.title('Correlation between Duration of Diabetes and HbA1c Reduction')
plt.xlabel('Duration of Diabetes (Years)')
plt.ylabel('HbA1c Reduction')
plt.grid(True, linestyle='--', alpha=0.5)
plt.show()

"""Key insights about the medication efficacy and safety based on the analysis and visualizations performed in this notebook:

Efficacy:

1)The medication appears to be effective in reducing HbA1c levels. This is supported by the t-test which showed a statistically significant difference in final HbA1c levels between the treatment and placebo groups, and also visualizations like box plots and scatter plots. Also, repeated measures ANOVA analysis demonstrated a statistically significant effect of the treatment on HbA1c levels over time.

2)Greater reduction in HbA1c was observed in the treatment group compared to the placebo group over time. This is evident from the line plot showing the change in HbA1c over time by group.
The medication's effectiveness may vary across different age groups and genders. This is suggested by the bar plot showing medication effectiveness by age group and gender, although more detailed analysis is needed to confirm this.

3) Duration of Diabetes and HbA1c Reduction show a weak positive correlation, This is shown by the scatter plot visualizing the relationship between the two variables. Indicating patients with a longer duration of diabetes may experience a slightly greater reduction in HbA1c with treatment.

Safety:

The chi-square test did not reveal a statistically significant association between the treatment group and the occurrence of adverse events. This suggests that the medication does not appear to increase the risk of adverse events compared to the placebo. However, the frequency and types of adverse events were examined and visualized, providing further information about the safety profile
"""





"""Regarding Medication Efficacy, Here the recommendation:

Continue to monitor the medication's effectiveness in reducing HbA1c levels over time.

This can be done through regular follow-up visits and HbA1c testing.

Considering further investigation into the medication's effectiveness across different age groups and genders.

A larger, more diverse sample size would provide a better understanding of the effectiveness across subpopulations.


Further research is recommended to explore the relationship between the duration of diabetes and medication response. This may help determine if the medication is more effective for certain patient profiles.
Regarding Medication Safety:

Maintain ongoing surveillance of adverse events associated with the medication.

This can help identify any potential safety concerns not detected in the initial trial.
Educate patients about the potential for adverse events and encourage them to report any unusual symptoms.

Patient involvement is crucial in maintaining medication safety.



General Recommendations:

Conduct a cost-effectiveness analysis to determine the value of the medication compared to existing treatments.

This can help inform healthcare providers and policymakers about resource allocation.


Compare the medication's effectiveness to other treatments available in the market.


This will provide a context for evaluating its overall benefits and risks.


Consider developing personalized treatment plans based on patient characteristics and response to the medication. This may help optimize treatment outcomes for individual patients.
"""

